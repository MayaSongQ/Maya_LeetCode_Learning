Given an array A of integers, return true if and only if it is a valid mountain array.

Recall that A is a mountain array if and only if:

A.length >= 3
There exists some i with 0 < i < A.length - 1 such that:
A[0] < A[1] < ... A[i-1] < A[i]
A[i] > A[i+1] > ... > A[A.length - 1]

Solution: Runtime: 64 ms, faster than 79.41%.Memory Usage: 22.4 MB, less than 61.65%.
class Solution {
public:
    bool validMountainArray(vector<int>& A) {
        bool bReturn = false;
        int iSize = A.size();
        if (2>=iSize)
        {
            return bReturn;
        }
        int iLMountain = 0;  // Find the Left Mountain
        int iRMountain = iSize-1;  // Find the Right Mountain
        while (iLMountain<iSize)
        {
            if (A[iLMountain+1]>A[iLMountain])
            {
                iLMountain++;
            }
            else
            {
                break;
            }
        }
        if (0 == iLMountain)
        {
            return bReturn;
        }

        while (iRMountain>iLMountain)
        {
            if (A[iRMountain-1]>A[iRMountain])
            {
                iRMountain--;
            }
            else
            {
                break;
            }
        }

        if (iRMountain==iLMountain && iLMountain!=0 && iRMountain!=(iSize-1))
        {
            bReturn = true;
        }
        return bReturn;
    }
};
