Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.

First Attempt Not Work:
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        // The whole array in ascending order means:
        // all numbers in the subarray left side is sorted and smaller than the subarray
        // all numbers in the subarray right side is sorted and bigger than the subarray
        // Find the ascending order from the end marked as leftIndex
        // Find the descending order from the end marked as rightIndex
        // Find the minimum value Mi of the middle array, the left subarray is end at the first number bigger then Mi
        // Find the maximum value Ma of the middle array, the right subarray is end at the first number smaller then Ma
        int iFindUnsortedSubarray = 0;
        int iLeftIndex = 0;
        int iRightIndex = nums.size(); // The initialize of the iRightIndex seems not correct. The iRightIndex can not equal to nums size.
        int iMi = 0;
        int iMa = 0;
        if (0 == iRightIndex)
        {
            return iFindUnsortedSubarray;
        }
        else
        {
            iMi = nums[0];
            iMa = nums[iRightIndex-1];
        }
        printf("iPre=%d, iEnd=%d,iLeftIndex=%d,iRightIndex=%d\n", iMi,iMa,iLeftIndex,iRightIndex);
        // Find the leftIndex
        for (int i=1; i<nums.size(); ++i)
        {
            if (nums[i-1] <= nums[i])
            {
                iLeftIndex = i;
            }
            else
            {
                iMi = nums[i];
                break;
            }
        }
        printf("iPre=%d, iEnd=%d,iLeftIndex=%d,iRightIndex=%d\n", iMi,iMa,iLeftIndex,iRightIndex);
        if (iLeftIndex == iRightIndex)
        {
            return iFindUnsortedSubarray;
        }
        // Find the rightIndex
        for (int i=nums.size()-1; i>0; --i)
        {
            if (nums[i] >= nums[i-1])
            {
                iRightIndex = i;
            }
            else
            {
                iMa = nums[i-1];
                break;
            }
        }
        // Find the iMi and iMa in the middle array
        for (int i=iLeftIndex+1; i<iRightIndex; ++i)
        {
            if (nums[i] < nums[i+1] && nums[i]<iMi)
            {
                iMi = nums[i];
            }
            else if (nums[i] > nums[i+1] && nums[i]>iMa)
            {
                iMa = nums[i];
            }
            else
            {
                continue;
            }
        }
        // Find the iLeftIndex, iRightIndex
        for (int i=0; i<iLeftIndex; ++i)
        {
            if (nums[i]>iMi)
            {
                iLeftIndex = i;
                break;
            }
        }
        for (int i=iRightIndex; i<nums.size(); --i)
        {
            if (nums[i]<iMa)
            {
                iRightIndex = i;
                break;
            }
        }
        printf("iPre=%d, iEnd=%d,iLeftIndex=%d,iRightIndex=%d\n", iMi,iMa,iLeftIndex,iRightIndex);
        iFindUnsortedSubarray = iRightIndex - iLeftIndex + 1;
        return iFindUnsortedSubarray;
    }
};

Input: [1,2,3,4]
iPre=1, iEnd=4,iLeftIndex=0,iRightIndex=4
iPre=1, iEnd=4,iLeftIndex=3,iRightIndex=4
iPre=1, iEnd=4,iLeftIndex=1,iRightIndex=1
Output: 1
Expected: 0


Input: [1,3,2,2,2]
iPre=1, iEnd=2,iLeftIndex=0,iRightIndex=4
iPre=2, iEnd=2,iLeftIndex=1,iRightIndex=4
iPre=2, iEnd=3,iLeftIndex=1,iRightIndex=3 // The 'equal' logic is not correct
Output: 3
Expected: 4

Solution 2: Runtime: 64 ms, faster than 84.71%. Memory Usage: 26.9 MB, less than 59.64%
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        // The whole array in ascending order means:
        // The first number must be the min value: [2,3,1,4] ==> [2,3,1]
        // The last number must be the max value: [1,3,2,2] ==> [3,2,2]
        int iFindUnsortedSubarray = 0;
        int iLeftIndex = 0;
        int iRightIndex = nums.size()-1;
        if (iRightIndex<1) // Only the single element array need to be judge
        {
            return iFindUnsortedSubarray;
        }
                
        int i = 1; // iterator for the whole loop
        for (; i<nums.size(); ++i)
        {
            if (nums[i] >= nums[i-1])
            {
                iLeftIndex = i;
            }
            else
            {
                break;
            }
        }
        if (iLeftIndex == (nums.size()-1)) // ascending order array
        {
            return iFindUnsortedSubarray;
        }
        
        // Make sure the left index number is smaller than all in right
        // the iLeftIndex is -1 when the subarray start at nums[0]. Such as [2,1]
        for (; i<nums.size()&&-1<iLeftIndex; ++i)
        {
            // No 'equal' in the condition, if the nums[i] == nums[iLeftIndex], don't move the index
            // Such as [2,2,3,2,4], the left index is 1. Don't move it when nums[1]==nums[3]
            while (-1<iLeftIndex && nums[iLeftIndex]>nums[i])
            {
                iLeftIndex--;
            }
        }
        
        // Find the right Index
        for (i=nums.size()-1; i<nums.size(); --i)
        {
            if (nums[i] >= nums[i-1])
            {
                iRightIndex = i;
            }
            else
            {
                break;
            }
        }
        // Make sure the right index number is bigger than all in left
        for (; i>iLeftIndex && nums.size()>iRightIndex; --i)
        {
            // No 'equal' in the condition, if the nums[i] == nums[iRightIndex], don't move the index
            // Such as [1,6,2,6,6], the right index is 3. Don't move it when nums[1]==nums[3]
            while (nums.size()>iRightIndex && nums[iRightIndex]<nums[i])
            {
                iRightIndex++;
            }
        }
        return iRightIndex - iLeftIndex - 1;
    }
};

