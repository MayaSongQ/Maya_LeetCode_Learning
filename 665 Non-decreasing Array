Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).

 

Example 1:

Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:

Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.
 

Constraints:

1 <= n <= 10 ^ 4
- 10 ^ 5 <= nums[i] <= 10 ^ 5

My Solution: Runtime: 60 ms, faster than 79.20%. Memory Usage: 27.1 MB, less than 24.23%
// Pay attention to the description 'modify'. It is not sorted!
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        // Only the array with at least three elements need to be checked.
        if (nums.size()<3)
        {
            return true;
        }
        
        // When there are three elements[x,y,z] un-sorted, 
        // There are two equals x=y=z, it is true
        // There is one equal:
        // x=y<z: true
        // x=y>z: z==>y
        // x=z<y: y==>x
        // x=z>y: y==>x
        // y=z<x: x==>y
        // y=z>x: true
        // There is no equal:
        // x<y<z: true
        // x<z<y: y==>x
        // y<x<z: y==>x
        // y<z<x: x==>y
        // z<x<y: z==>y
        // z<y<x: false
        // Always compare the nums[i-1], nums[i], nums[i+1] with the cases above.
        // There could be only one 'TRUE' case in the whole loop and one element could be modified.
        // x==>y: y<=z<x
        // y==>x: y>z>=x,y<x<=z
        // z==>y: y>=x>z
        
        /* When there are three elements[x,y,z] un-sorted, 
           compare y and z first:
           y=z, if x<=y=z, then true; if y=z<x, then x==>y
           y<z, if x<=y<z, then true; if y<z<x, then x==>y; if y<x<=z, then y==>x
           y>z, if z<y<x, then false; if y>=x>z,then z==>y; if y>z>=x, then y==>x
           x==>y: y<=z<x
           y==>x: y>z>=x,y<x<=z
           z==>y: y>=x>z
        */
        int iCountTrue = 0;
        for (int i=1; i<nums.size()-1&&3>iCountTrue; ++i)
        {
            // decreasing array always false:
            if (nums[i-1]>nums[i] && nums[i]>nums[i+1])
            {
                return false;
            }
            // Modify x to y: No need to modify but need to count
            else if (nums[i]<=nums[i+1] && nums[i+1]<nums[i-1])
            {
                nums[i-1]=nums[i];
                ++iCountTrue;
            }
            // Modify y to x:
            else if (nums[i]>nums[i+1] && nums[i+1]>=nums[i-1])
            {
                nums[i]=nums[i-1];
                ++iCountTrue;
            }
            else if (nums[i]<nums[i-1] && nums[i-1]<=nums[i+1])
            {
                nums[i]=nums[i-1];
                ++iCountTrue;
            }
            // Modify z to y:
            else if (nums[i]>=nums[i-1] && nums[i-1]>nums[i+1])
            {
                nums[i+1]=nums[i];
                ++iCountTrue;
            }
        }
        return (1>=iCountTrue)?true:false;
    }
};

Solution 2: Runtime: 64 ms, faster than 61.48%.Memory Usage: 27.1 MB, less than 42.78%
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        // Only the array with at least three elements need to be checked.
        if (nums.size()<3)
        {
            return true;
        }
        
        /* When there are three elements[x,y,z] un-sorted, 
           skip all non-decreasing, x<=y or y<=z
           compare x and y first:
           if y<x, one mofify is needed. It could be x==>y or y==>x. Modify the bigger number to the small one is better. It could avoid y'>z.
           compare x and z when y>z as second round:
           if y>=x>z, then z==>y;
           if y>z>=x, then y==>z
        */
        bool bModify = false;
        for (int i=0; i<nums.size()-1; ++i)
        {
            if (nums[i+1]<nums[i]) // Only the decreasing need to be adjust
            {
                if (bModify) // Second adjust is not allowed
                {
                    return false;
                }
                else
                {
                    if (0>i-1 || nums[i+1]>=nums[i-1]) // garantee the i-1 element is not overflow
                    {
                        nums[i]=nums[i+1];
                    }
                    else
                    {
                        nums[i+1]=nums[i];
                    }
                    bModify = true;
                }
            }
        }
        return true;
    }
};
