Given the array candies and the integer extraCandies, where candies[i] represents the number of candies that the ith kid has.
For each kid check if there is a way to distribute extraCandies among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.
 
Example 1:
Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Explanation: 
Kid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids. 
Kid 2 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. 
Kid 3 has 5 candies and this is already the greatest number of candies among the kids. 
Kid 4 has 1 candy and even if he or she receives all extra candies will only have 4 candies. 
Kid 5 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. 

Example 2:
Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 
Explanation: There is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy.

Example 3:
Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]

 
Constraints:
2 <= candies.length <= 100
1 <= candies[i] <= 100
1 <= extraCandies <= 50

Solution 1: Rumtime 8 ms faster than 27.58%, Memory 9.2 MB less than 14.94%
class Solution {
public:// Need to pay attention to the return value format
    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {
        int iGreatNum = 0;
        vector<bool> vecReturn;
        vector<int> vecAddExtraCandies = candies;
        for (int index=0; index<candies.size(); ++index)
        {
            if (iGreatNum < candies[index])
            {
                iGreatNum = candies[index];
            }
            vecAddExtraCandies[index] += extraCandies;
        }
        for (int index=0; index<vecAddExtraCandies.size(); ++index)
        {
            if (vecAddExtraCandies[index] >= iGreatNum)
            {
                vecReturn.push_back(true);
            }
            else
            {
                vecReturn.push_back(false);
            }
        }
        return vecReturn;
    }
};


Solution 2: Rumtime 8 ms faster than 27.58%, Memory 8.9 MB less than 90.27%
class Solution {
public:
    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {
        int iGreatNum = 0;
        vector<bool> vecReturn;
        for (int index=0; index<candies.size(); ++index)
        {
            if (iGreatNum < candies[index])
            {
                iGreatNum = candies[index];
            }
        }
        for (int index=0; index<candies.size(); ++index)
        {
            int iCurNum = candies[index]+extraCandies;
            if (iCurNum >= iGreatNum) // the calculation of "candies[index]+=extraCandies" can not apply within 'if'
            {
                vecReturn.push_back(true);
            }
            else
            {
                vecReturn.push_back(false);
            }
        }
        return vecReturn;
    }
};


Solution 3: Rumtime 8 ms faster than 27.58%, Memory 8.9 MB less than 85.62%
class Solution {
public:
    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {
        int iGreatNum = 0;
        vector<bool> vecReturn;
        for (int index=0; index<candies.size(); ++index)
        {
            if (iGreatNum < candies[index])
            {
                iGreatNum = candies[index];
            }
        }
        for (int index=0; index<candies.size(); ++index)
        {
            if (candies[index]+extraCandies >= iGreatNum)
            {
                vecReturn.push_back(true);
            }
            else
            {
                vecReturn.push_back(false);
            }
        }
        return vecReturn;
    }
};

Solution 4: Rumtime 4 ms faster than 86.88%, Memory 9 MB less than 60.49%
class Solution {
public:
    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {
        vector<bool> vecReturn;
        
        // It is recommanded to to use the STL functions. They are safer and more efficiency. Using space for time.
        int iGreatNum = *max_element(candies.begin(), candies.end());
        
        for (int index=0; index<candies.size(); ++index)
        {
            if (candies[index]+extraCandies >= iGreatNum)
            {
                vecReturn.push_back(true);
            }
            else
            {
                vecReturn.push_back(false);
            }
        }
        return vecReturn;
    }
};

